*Intro: This is very simple blog by Ruby on rails(4.2.1). Designed with bootstrap3(http:///getboostrap.com)

*License: All source code follows each gem's LICENSE. Other than that, rest codes follows MIT license.http://mit-license.org/

*Included ruby gems:
 1. solr
 2. friendly_id
 3. devise
 4. bootstrap
 5. kaminari
 6. rails(4.2.1)
 7. tinymce
 8. Each gem's version is included in Gemfile.

--Development environment--
* Ruby version: 2.2.2

* Rails : 4.2.1

* MySQL: | 5.6.19-0ubuntu0.14.04.1 |

--Deployment-- 
#To use solr search engine, we first install java runtime environment such as openjdk,oracle java. IBM jdk is not tested.

#We need root and rails account. Here is rails account is whatsup.

#Env is ubuntu14.04 apache and mysql.


        whatsup@whatsup-To-be-filled-by-O-E-M ~/ror/blog $ apache2 -v
        Server version: Apache/2.4.7 (Ubuntu)
        Server built:   Mar 10 2015 13:05:59
    
    
         root@ts2:~# apt-get install libmysqlclient-dev
         root@ts2:~# sudo apt-get install nodejs
         root@ts2:~# sudo apt-get install openjdk-7-jre-headless
         root@ts2:~# apt-get install mysql-server-5.6


       whatsup@hostname ~ $ mkdir rails_root
       whatsup@hostname ~ $ cd rails_root/
       
       
       whatsup@hostname ~/rails_root $ git clone https://github.com/ohyoungjooung2/myblog.git
       whatsup@hostname ~/rails_root $gem install bundle
       whatsup@hostname ~/rails_root $vagrant@ts2:~/rails_root/myblog$ bundle install

#root or database user password edit.

       whatsup@hostname ~/rails_root/myblog $ mysql -u root -p
       Enter password: 
       Welcome to the MySQL monitor.  Commands end with ; or \g.
       Your MySQL connection id is 6
       Server version: 5.6.19-0ubuntu0.14.04.1 (Ubuntu)
       Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
       Oracle is a registered trademark of Oracle Corporation and/or its
       affiliates. Other names may be trademarks of their respective
       owners.
       Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
       mysql> create database myblog_production;
       mysql> mysql> GRANT ALL PRIVILEGES ON myblog_production.* to 'myblog'@'localhost' IDENTIFIED BY 'secret';
       Query OK, 0 rows affected (0.00 sec)
       
       Query OK, 0 rows affected (0.00 sec)
       
       mysql> FLUSH PRIVILEGES;
       Query OK, 0 rows affected (0.00 sec)
       
       
#precompile assets
       whatsup@hostname ~/rails_root/myblog rake assets:precompile RAILS_ENV="production"

       whatsup@hostname ~/rails_root/myblog $ vi config/database.yml 
       # MySQL.  Versions 4.1 and 5.0 are recommended.
       #
       # Install the MYSQL driver
       #   gem install mysql2
       #
       # Ensure the MySQL gem is defined in your Gemfile
       #   gem 'mysql2'
       #
       # And be sure to use new-style password hashing:
       #   http://dev.mysql.com/doc/refman/5.0/en/old-client.html
       # Warning: The database defined as "test" will be erased and
       # re-generated from your development database when you run "rake".
       # Do not set this db to the same as development or production.
       production:
         adapter: mysql2
         encoding: utf8
         database: myblog_production
         pool: 5
         username: myblog
         password: secret
         socket: /var/run/mysqld/mysqld.sock
       
         whatsup@hostname ~/rails_root/myblog $ rake db:setup RAILS_ENV="production"
       ---...other messages --
       -- add_index("users", ["reset_password_token"], {:name=>"index_users_on_reset_password_token", :unique=>true, :using=>:btree})
          -> 0.4454s
       -- initialize_schema_migrations_table()
          -> 0.0048s



#No error..




#Passenger install. May need root account.

       $ gem install passenger --version 4.0.8
       $ passenger-install-apache2-module

#Apache virtual host(root)

        hostname sites-enabled # pwd
       /etc/apache2/sites-enabled


#Domain name to /etc/hosts

        hostname sites-enabled # vi /etc/hosts
        127.0.0.1       localhost ror.com unicorn myblog.oyj
        
        hostname sites-enabled # vi 003-myblog.conf 
        <VirtualHost *:80>
                ServerName myblog.oyj
                RailsEnv production
                #RailsEnv development
        
                ServerAdmin webmaster@localhost
                DocumentRoot /home/whatsup/rails_root/myblog/public
        
                LoadModule passenger_module /home/whatsup/rubies/ruby-2.2.2/lib/ruby/gems/2.2.0/gems/passenger-5.0.9/buildout/apache2/mod_passenger.so
               <IfModule mod_passenger.c>
                  PassengerRoot /home/whatsup/rubies/ruby-2.2.2/lib/ruby/gems/2.2.0/gems/passenger-5.0.9
                  PassengerDefaultRuby /home/whatsup/rubies/ruby-2.2.2/bin/ruby
              </IfModule>
       
               #LogLevel debug ssl:warn
               LogLevel warn
               #LogLevel debug 
               ErrorLog ${APACHE_LOG_DIR}/error-myblog.log
               CustomLog ${APACHE_LOG_DIR}/access-myblog.log combined
              <Directory /home/whatsup/rails_root/myblog/public/>
               AllowOverride all
               Options -MultiViews
               Require all granted
              </Directory>
       </VirtualHost>


#Production solr edit.

       whatsup@hostname ~/rails_root/myblog $ vi solr/solr.xml 
       <?xml version="1.0" encoding="UTF-8" ?>
       <solr persistent="false">
         <cores adminPath="/admin/cores" host="${host:}" hostPort="${jetty.port:}">
           <core name="default"     instanceDir="." dataDir="default/data"/>
           <core name="development" instanceDir="." dataDir="development/data"/>
           <core name="production" instanceDir="." dataDir="production/data"/>
           <core name="test"        instanceDir="." dataDir="test/data"/>
         </cores>
       </solr>
       whatsup@hostname ~/rails_root/myblog $ rake sunspot:solr:start RAILS_ENV="production"
       Successfully started Solr ...

2. Nginx unicorn
        vagrant@ts2:~$ uname -a
        Linux ts2 3.13.0-24-generic $47-Ubuntu SMP Fri May 2 23:30:00 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
        vagrant@ts2:~$ cat /etc/issue
        Ubuntu 14.04 LTS \n \l
        
        root@ts2:/home/vagrant# apt-get install nginx
        root@ts2:~# apt-get install libmysqlclient-dev
        root@ts2:~# sudo apt-get install nodejs
        root@ts2:~# sudo apt-get install openjdk-7-jre-headless
        root@ts2:~# apt-get install mysql-server-5.6
        
        #MYSQL SETUP
        whatsup@hostname ~/rails_root/myblog $ mysql -u root -p
        Enter password: 
        Welcome to the MySQL monitor.  Commands end with ; or \g.
        Your MySQL connection id is 6
        Server version: 5.6.19-0ubuntu0.14.04.1 (Ubuntu)
        
        Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.
        
        Oracle is a registered trademark of Oracle Corporation and/or its
        affiliates. Other names may be trademarks of their respective
        owners.
        
        Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
        
        mysql> create database myblog_production;
        
        mysql> mysql> GRANT ALL PRIVILEGES ON myblog_production.* to 'myblog'@'localhost' IDENTIFIED BY 'secret';
        Query OK, 0 rows affected (0.00 sec)
        
        Query OK, 0 rows affected (0.00 sec)
        
        mysql> FLUSH PRIVILEGES;
        Query OK, 0 rows affected (0.00 sec)
        
        
        
        
        whatsup@hostname ~/rails_root/myblog $ vi config/database.yml 
        
                # MySQL.  Versions 4.1 and 5.0 are recommended.
        #
        # Install the MYSQL driver
        #   gem install mysql2
        #
        # Ensure the MySQL gem is defined in your Gemfile
        #   gem 'mysql2'
        #
        # And be sure to use new-style password hashing:
        #   http://dev.mysql.com/doc/refman/5.0/en/old-client.html
        
        
        # Warning: The database defined as "test" will be erased and
        # re-generated from your development database when you run "rake".
        # Do not set this db to the same as development or production.
        
        
        production:
          adapter: mysql2
          encoding: utf8
          database: myblog_production
          pool: 5
          username: myblog
          password: secret
          socket: /var/run/mysqld/mysqld.sock
        
        
        
#ruby upgrade on user directory only.
#We can use rvm but I used my script for no reason.
         vagrant@ts2:~$ ruby -v
         ruby 1.9.3p547 (2014-05-14 revision 45962) [x86_64-linux]
         vagrant@ts2:~$ 
         
--ruby 2.2 install--
       vagrant@ts2:~$ wget -O ruby_install.sh https://gist.githubusercontent.com/ohyoungjooung2/c3ffd2184f4f0ce292ef/raw/0abd98b5e3f845e422ccccc535fcc989042ae6/gistfile1.txt
       
       vagrant@ts2:~$ bash ruby_install.sh 2.2.2
       
       vagrant@ts2:~$ ruby -v
       ruby 1.9.3p547 (2014-05-14 revision 45962) [x86_64-linux]
       vagrant@ts2:~$ source ~/.bashrc 
       vagrant@ts2:~$ ruby -v
       ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]
       
       
       vagrant@ts2:~$ mkdir rails_root
       vagrant@ts2:~$ cd rails_root/
       vagrant@ts2:~/rails_root$ git clone https://github.com/ohyoungjooung2/myblog.git
       
       vagrant@ts2:~/rails_root/$cd myblog
       vagrant@ts2:~/rails_root/myblog$ gem install bundle
       vagrant@ts2:~/rails_root/myblog$ bundle install
       
       
       vagrant@ts2:~/rails_root/myblog$ vi config/unicorn.rb 
#From https://coderwall.com/p/yz8cha/deploying-rails-app-using-nginx-unicorn-postgres-and-capistrano-to-digital-ocean 
        root = "/home/vagrant/rails_root/myblog"
        working_directory root
        pid "#{root}/tmp/pids/unicorn.pid"
        stderr_path "#{root}/log/unicorn_err.log"
        stdout_path "#{root}/log/unicorn.log"
        
        listen "/tmp/unicorn.blog.sock"
        
        worker_processes 2
        timeout 30

#Force the bundler gemfile environment variable to
#reference the capistrano "current" symlink
        before_exec do |_|
        ENV["BUNDLE_GEMFILE"] = File.join(root,'Gemfile')
        end


#Creating unicorn_init.sh file
        # From https://coderwall.com/p/yz8cha/deploying-rails-app-using-nginx-unicorn-postgres-and-capistrano-to-digital-ocean 
        #!/bin/sh
        ### BEGIN INIT INFO
        # Provides:          unicorn
        # Required-Start:    $remote_fs $syslog
        # Required-Stop:     $remote_fs $syslog
        # Default-Start:     2 3 4 5
        # Default-Stop:      0 1 6
        # Short-Description: Manage unicorn server
        # Description:       Start, stop, restart unicorn server for a specific application.
        ### END INIT INFO
        set -e
        
        # Feel free to change any of the following variables for your env.
        TIMEOUT=${TIMEOUT-60}
        APP_ROOT=/home/vagrant/rails_root/myblog
        PID=$APP_ROOT/tmp/pids/unicorn.pid
        CMD="cd $APP_ROOT; bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production"
        AS_USER=whatsup
        set -u
        
        OLD_PIN="$PID.oldbin"

        sig() {
           test -s "$PID" && kill -$1 `cat $PID`
        }
        
        oldsig(){
           test -s $OLD_PIN && kill -$1 `cat $OLD_PIN`
        }
        
        run(){
           if [ "$(id -un)" = "$AS_USER" ]; then
            eval $1
           else
            su -c "$1" - $AS_USER
           fi
        }
        
        case "$1" in
        start)
           sig 0 && echo >&2 "Already running" && exit 0
           run "$CMD"
           ;;
        stop)
           sig QUIT && exit 0
           echo >&2 "Not running"
           ;;
        force-stop)
           sig TERM && exit 0
           echo >&2 "Not running"
   ;;
        
        restart|reload)
          sig HUP && echo reloaded OK && exit 0
          echo >&2 "Couldn't reload, starting '$CMD' Instead"
          run "$CMD"
          ;;
        
        upgrade)
          if sig USR2 && sleep 2 && sig 0 && oldsig QUIT
          then
            n=$TIMEOUT
            while test -s $OLD_PIN && test $n -ge 0
            do
              printf '.' && sleep 1 && n=$(( $n -1 ))
            done
            echo
        
          if test $n -lt 0 && test -s $OLD_PIN
            then
              echo >&2 "$OLD_PIN still exists after $TIMEOUT seconds"
              exit 1
            fi
            exit 0
          fi
          echo >&2 "Couldn't upgrade, starting '$CMD' instead"
          run "$CMD"
          ;;
        reopen-logs)
          sig USR1
          ;;
        *)
          echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
          exit 1
          ;;
        esac
        

#Nginx virtual host
        vagrant@ts2:~/rails_root/myblog$ sudo vi /etc/nginx/sites-available/default 
        
        upstream unicorn {
           server unix:/tmp/unicorn.blog.sock fail_timeout=0;
        }
        
        server {
                listen 80 default_server deferred;
                #listen [::]:80 default_server ipv6only=on;
        
                root /home/vagrant/rails_root/myblog/public;
        
                # Make site accessible from http://localhost/
                server_name server_ip_or_name; #We coluld we /etc/hosts file or domain server(for real production)
        
                location ^~ /assets/  {
                        # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                gzip_static on;
                expires max;
                add_header Cache-Control public;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
                }
                try_files $uri $uri/index.html $uri @unicorn;

                location @unicorn {
                   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                   proxy_set_header Host $http_host;
                   proxy_redirect off;
                   proxy_pass http://unicorn;
                }

                     error_page 500 502 503 504 /500.html;
                     client_max_body_size 20M;
                     keepalive_timeout 10;
             
             }


        vagrant@ts2:~/rails_root/myblog$ mkdir -p tmp/pids
        vagrant@ts2:~/rails_root/myblog$ ./config/unicorn_init.sh start
        vagrant@ts2:~/rails_root/myblog$ rake sunspot:solr:start RAILS_ENV="production"
        Successfully started Solr ...
        
        
        
        root@ts2:/home/vagrant/rails_root/myblog# service nginx restart


#Creating categories. We can craeate category by inserting categories table
#Using seed.rb example
           $user~/myblog/db$ vi seeds.rb 

           # This file should contain all the record creation needed to seed the database with its default values.
           # The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
           #
           # Examples:
           #
           #   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
           #   Mayor.create(name: 'Emanuel', city: cities.first)
           #   Creating Ruby,Rails,Linux categories
           categories = Category.create([{name: 'Ruby',slug: 'Ruby-Programming'},{name: 'Rails',slug: 'Rails-Rocks?'},{name: 'Linux',slug: 'Linux-Rocks?'}])
          
           $user~/myblog/db$rake db:seed 

#Admin user creation.
After install this blog, we can create admin user who will be able to create categories via web interface. First go to 'http://yourhost_or_ip/users/sing_up' and register. Then, using rails console(of course mysql update also works), update that singed_up email rows 'set admin true'.

           Example)
           rails4@puppetclient1:~/myblog/config$ rails console "production"

           irb(main):001:0> User.create(email: 'wnapdlf05@gmail.com',password: 'secretpassword',admin: true)

           Categories url is http://hostname/categories.With new button, we can create categories easily. 


#We can deploy using puppet. I created basic puppet modules for deploying this MyBlog. If you know how to manage puppet framework, refer to below link.
           https://github.com/ohyoungjooung2/puppetmaster
        
*Todo: Some jquery related things. I am not good at javascript. Somebody help me.



        
*Purpose: To know rails and practice. To deploy rails app.
